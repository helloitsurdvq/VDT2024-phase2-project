"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeTracerProvider = void 0;
const context_async_hooks_1 = require("@opentelemetry/context-async-hooks");
const tracing_1 = require("@opentelemetry/tracing");
const config_1 = require("./config");
const PluginLoader_1 = require("./instrumentation/PluginLoader");
/**
 * Register this TracerProvider for use with the OpenTelemetry API.
 * Undefined values may be replaced with defaults, and
 * null values will be skipped.
 *
 * @param config Configuration object for SDK registration
 */
class NodeTracerProvider extends tracing_1.BasicTracerProvider {
    /**
     * Constructs a new Tracer instance.
     */
    constructor(config = {}) {
        super(config);
        this._pluginLoader = new PluginLoader_1.PluginLoader(this, this.logger);
        config.plugins
            ? this._pluginLoader.load(this._mergePlugins(config_1.DEFAULT_INSTRUMENTATION_PLUGINS, config.plugins))
            : this._pluginLoader.load(config_1.DEFAULT_INSTRUMENTATION_PLUGINS);
    }
    stop() {
        this._pluginLoader.unload();
    }
    register(config = {}) {
        if (config.contextManager === undefined) {
            config.contextManager = new context_async_hooks_1.AsyncHooksContextManager();
            config.contextManager.enable();
        }
        super.register(config);
    }
    /**
     * Two layer merge.
     * First, for user supplied config of plugin(s) that are loaded by default,
     * merge the user supplied and default configs of said plugin(s).
     * Then merge the results with the default plugins.
     * @returns 2-layer deep merge of default and user supplied plugins.
     */
    _mergePlugins(defaultPlugins, userSuppliedPlugins) {
        const mergedUserSuppliedPlugins = {};
        for (const pluginName in userSuppliedPlugins) {
            mergedUserSuppliedPlugins[pluginName] = Object.assign(Object.assign({}, (config_1.DEFAULT_INSTRUMENTATION_PLUGINS[pluginName] || { enabled: true })), userSuppliedPlugins[pluginName]);
        }
        const mergedPlugins = Object.assign(Object.assign({}, defaultPlugins), mergedUserSuppliedPlugins);
        return mergedPlugins;
    }
}
exports.NodeTracerProvider = NodeTracerProvider;
//# sourceMappingURL=NodeTracerProvider.js.map