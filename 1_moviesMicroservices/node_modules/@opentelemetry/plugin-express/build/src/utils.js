"use strict";
/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
/**
 * Store layers path in the request to be able to construct route later
 * @param request The request where
 * @param [value] the value to push into the array
 */
exports.storeLayerPath = (request, value) => {
    if (Array.isArray(request[types_1._LAYERS_STORE_PROPERTY]) === false) {
        Object.defineProperty(request, types_1._LAYERS_STORE_PROPERTY, {
            enumerable: false,
            value: [],
        });
    }
    if (value === undefined)
        return;
    request[types_1._LAYERS_STORE_PROPERTY].push(value);
};
/**
 * Parse express layer context to retrieve a name and attributes.
 * @param layer Express layer
 * @param [layerPath] if present, the path on which the layer has been mounted
 */
exports.getLayerMetadata = (layer, layerPath) => {
    if (layer.name === 'router') {
        return {
            attributes: {
                [types_1.AttributeNames.EXPRESS_NAME]: layerPath,
                [types_1.AttributeNames.EXPRESS_TYPE]: types_1.ExpressLayerType.ROUTER,
            },
            name: `router - ${layerPath}`,
        };
    }
    else if (layer.name === 'bound dispatch') {
        return {
            attributes: {
                [types_1.AttributeNames.EXPRESS_NAME]: (layerPath !== null && layerPath !== void 0 ? layerPath : 'request handler'),
                [types_1.AttributeNames.EXPRESS_TYPE]: types_1.ExpressLayerType.REQUEST_HANDLER,
            },
            name: `request handler${layer.path ? ` - ${layerPath}` : ''}`,
        };
    }
    else {
        return {
            attributes: {
                [types_1.AttributeNames.EXPRESS_NAME]: layer.name,
                [types_1.AttributeNames.EXPRESS_TYPE]: types_1.ExpressLayerType.MIDDLEWARE,
            },
            name: `middleware - ${layer.name}`,
        };
    }
};
/**
 * Check whether the given obj match pattern
 * @param constant e.g URL of request
 * @param obj obj to inspect
 * @param pattern Match pattern
 */
const satisfiesPattern = (constant, pattern) => {
    if (typeof pattern === 'string') {
        return pattern === constant;
    }
    else if (pattern instanceof RegExp) {
        return pattern.test(constant);
    }
    else if (typeof pattern === 'function') {
        return pattern(constant);
    }
    else {
        throw new TypeError('Pattern is in unsupported datatype');
    }
};
/**
 * Check whether the given request is ignored by configuration
 * It will not re-throw exceptions from `list` provided by the client
 * @param constant e.g URL of request
 * @param [list] List of ignore patterns
 * @param [onException] callback for doing something when an exception has
 *     occurred
 */
exports.isLayerIgnored = (name, type, config) => {
    var _a, _b, _c, _d;
    if (Array.isArray((_a = config) === null || _a === void 0 ? void 0 : _a.ignoreLayersType) && ((_c = (_b = config) === null || _b === void 0 ? void 0 : _b.ignoreLayersType) === null || _c === void 0 ? void 0 : _c.includes(type))) {
        return true;
    }
    if (Array.isArray((_d = config) === null || _d === void 0 ? void 0 : _d.ignoreLayers) === false)
        return false;
    try {
        for (const pattern of config.ignoreLayers) {
            if (satisfiesPattern(name, pattern)) {
                return true;
            }
        }
    }
    catch (e) { }
    return false;
};
//# sourceMappingURL=utils.js.map