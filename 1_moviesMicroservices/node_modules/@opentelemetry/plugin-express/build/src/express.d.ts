/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BasePlugin } from '@opentelemetry/core';
import * as express from 'express';
import { ExpressPluginConfig } from './types';
/**
 * This symbol is used to mark express layer as being already instrumented
 * since its possible to use a given layer multiple times (ex: middlewares)
 */
export declare const kLayerPatched: unique symbol;
/** Express instrumentation plugin for OpenTelemetry */
export declare class ExpressPlugin extends BasePlugin<typeof express> {
    readonly moduleName: string;
    static readonly component = "express";
    readonly supportedVersions: string[];
    protected _config: ExpressPluginConfig;
    constructor(moduleName: string);
    /**
     * Patches Express operations.
     */
    protected patch(): typeof express;
    /** Unpatches all Express patched functions. */
    unpatch(): void;
    /**
     * Get the patch for Router.route function
     * @param original
     */
    private _getRoutePatch;
    /**
     * Get the patch for Router.use function
     * @param original
     */
    private _getRouterUsePatch;
    /**
     * Get the patch for Application.use function
     * @param original
     */
    private _getAppUsePatch;
    /** Patch each express layer to create span and propagate context */
    private _applyPatch;
}
export declare const plugin: ExpressPlugin;
//# sourceMappingURL=express.d.ts.map