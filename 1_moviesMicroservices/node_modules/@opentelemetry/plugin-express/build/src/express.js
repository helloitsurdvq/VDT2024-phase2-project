"use strict";
/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@opentelemetry/core");
const shimmer = require("shimmer");
const types_1 = require("./types");
const utils_1 = require("./utils");
const version_1 = require("./version");
/**
 * This symbol is used to mark express layer as being already instrumented
 * since its possible to use a given layer multiple times (ex: middlewares)
 */
exports.kLayerPatched = Symbol('express-layer-patched');
/** Express instrumentation plugin for OpenTelemetry */
class ExpressPlugin extends core_1.BasePlugin {
    constructor(moduleName) {
        super('@opentelemetry/plugin-express', version_1.VERSION);
        this.moduleName = moduleName;
        this.supportedVersions = ['^4.0.0'];
    }
    /**
     * Patches Express operations.
     */
    patch() {
        this._logger.debug('Patching Express');
        if (this._moduleExports === undefined || this._moduleExports === null) {
            return this._moduleExports;
        }
        const routerProto = this._moduleExports
            .Router;
        this._logger.debug('patching express.Router.prototype.route');
        shimmer.wrap(routerProto, 'route', this._getRoutePatch.bind(this));
        this._logger.debug('patching express.Router.prototype.use');
        shimmer.wrap(routerProto, 'use', this._getRouterUsePatch.bind(this));
        this._logger.debug('patching express.Application.use');
        shimmer.wrap(this._moduleExports.application, 'use', this._getAppUsePatch.bind(this));
        return this._moduleExports;
    }
    /** Unpatches all Express patched functions. */
    unpatch() {
        const routerProto = this._moduleExports
            .Router;
        shimmer.unwrap(routerProto, 'use');
        shimmer.unwrap(routerProto, 'route');
        shimmer.unwrap(this._moduleExports.application, 'use');
    }
    /**
     * Get the patch for Router.route function
     * @param original
     */
    _getRoutePatch(original) {
        const plugin = this;
        return function route_trace(...args) {
            const route = original.apply(this, args);
            const layer = this.stack[this.stack.length - 1];
            plugin._applyPatch(layer, typeof args[0] === 'string' ? args[0] : undefined);
            return route;
        };
    }
    /**
     * Get the patch for Router.use function
     * @param original
     */
    _getRouterUsePatch(original) {
        const plugin = this;
        return function use(...args) {
            const route = original.apply(this, args);
            const layer = this.stack[this.stack.length - 1];
            plugin._applyPatch(layer, typeof args[0] === 'string' ? args[0] : undefined);
            return route;
            // tslint:disable-next-line:no-any
        };
    }
    /**
     * Get the patch for Application.use function
     * @param original
     */
    _getAppUsePatch(original) {
        const plugin = this;
        return function use(...args) {
            const route = original.apply(this, args);
            const layer = this._router.stack[this._router.stack.length - 1];
            plugin._applyPatch(layer, typeof args[0] === 'string' ? args[0] : undefined);
            return route;
            // tslint:disable-next-line:no-any
        };
    }
    /** Patch each express layer to create span and propagate context */
    _applyPatch(layer, layerPath) {
        const plugin = this;
        if (layer[exports.kLayerPatched] === true)
            return;
        layer[exports.kLayerPatched] = true;
        this._logger.debug('patching express.Router.Layer.handle');
        shimmer.wrap(layer, 'handle', function (original) {
            if (original.length === 4)
                return original;
            return function (req, res, next) {
                utils_1.storeLayerPath(req, layerPath);
                const route = req[types_1._LAYERS_STORE_PROPERTY].join('');
                const attributes = {
                    [types_1.AttributeNames.COMPONENT]: ExpressPlugin.component,
                    [types_1.AttributeNames.HTTP_ROUTE]: route.length > 0 ? route : undefined,
                };
                const metadata = utils_1.getLayerMetadata(layer, layerPath);
                const type = metadata.attributes[types_1.AttributeNames.EXPRESS_TYPE];
                // verify against the config if the layer should be ignored
                if (utils_1.isLayerIgnored(metadata.name, type, plugin._config)) {
                    return original.apply(this, arguments);
                }
                const span = plugin._tracer.startSpan(metadata.name, {
                    attributes: Object.assign(attributes, metadata.attributes),
                });
                const startTime = core_1.hrTime();
                let spanHasEnded = false;
                // If we found anything that isnt a middleware, there no point of measuring
                // stheir time ince they dont have callback.
                if (metadata.attributes[types_1.AttributeNames.EXPRESS_TYPE] !==
                    types_1.ExpressLayerType.MIDDLEWARE) {
                    span.end(startTime);
                    spanHasEnded = true;
                }
                // verify we have a callback
                const args = Array.from(arguments);
                const callbackIdx = args.findIndex(arg => typeof arg === 'function');
                if (callbackIdx >= 0) {
                    arguments[callbackIdx] = function () {
                        if (spanHasEnded === false) {
                            span.end();
                            spanHasEnded = true;
                        }
                        if (!(req.route && arguments[0] instanceof Error)) {
                            req[types_1._LAYERS_STORE_PROPERTY].pop();
                        }
                        const callback = args[callbackIdx];
                        return plugin._tracer.bind(callback).apply(this, arguments);
                    };
                }
                const result = original.apply(this, arguments);
                // If the callback is never called, we need to close the span.
                setImmediate(() => {
                    if (spanHasEnded === false) {
                        span.end(startTime);
                    }
                }).unref();
                return result;
            };
        });
    }
}
exports.ExpressPlugin = ExpressPlugin;
ExpressPlugin.component = 'express';
exports.plugin = new ExpressPlugin(ExpressPlugin.component);
//# sourceMappingURL=express.js.map