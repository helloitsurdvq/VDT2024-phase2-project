import { ContextManager, Context } from '@opentelemetry/context-base';
export declare class AsyncHooksContextManager implements ContextManager {
    private _asyncHook;
    private _contexts;
    private _stack;
    constructor();
    active(): Context;
    with<T extends (...args: unknown[]) => ReturnType<T>>(context: Context, fn: T): ReturnType<T>;
    bind<T>(target: T, context?: Context): T;
    enable(): this;
    disable(): this;
    private _bindFunction;
    /**
     * By default, EventEmitter call their callback with their context, which we do
     * not want, instead we will bind a specific context to all callbacks that
     * go through it.
     * @param target EventEmitter a instance of EventEmitter to patch
     * @param context the context we want to bind
     */
    private _bindEventEmitter;
    /**
     * Patch methods that remove a given listener so that we match the "patched"
     * version of that listener (the one that propagate context).
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     */
    private _patchRemoveListener;
    /**
     * Patch methods that remove all listeners so we remove our
     * internal references for a given event.
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     */
    private _patchRemoveAllListeners;
    /**
     * Patch methods on an event emitter instance that can add listeners so we
     * can force them to propagate a given context.
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     * @param [context] context to propagate when calling listeners
     */
    private _patchAddListener;
    /**
     * Init hook will be called when userland create a async context, setting the
     * context as the current one if it exist.
     * @param uid id of the async context
     */
    private _init;
    /**
     * Destroy hook will be called when a given context is no longer used so we can
     * remove its attached context.
     * @param uid uid of the async context
     */
    private _destroy;
    /**
     * Before hook is called just beforing executing a async context.
     * @param uid uid of the async context
     */
    private _before;
    /**
     * After hook is called just after completing the execution of a async context.
     */
    private _after;
    /**
     * Set the given context as active
     */
    private _enterContext;
    /**
     * Remove the context at the root of the stack
     */
    private _exitContext;
}
//# sourceMappingURL=AsyncHooksContextManager.d.ts.map